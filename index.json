[{"categories":["linux"],"contents":"  heard you want that unixporn setup this post will guide you through the basic steps of ricing your distro    It all started out as fun and games. Then the poor habits caught up with me. Wrist repetitive strain injury (abbreviated rsi) is no fun, especially when you start showing symptoms in your late teens. And that your job is to be behind a screen writing code. And your hobby is pretty much the same thing\u0026hellip;\nHowever, my existential crisis was short-lived as I soon realized there are many things that I could do to improve the ergonomics of my setup.\na (not so quick) primer Speaking of ergonomics, I think it is quite important that I begin this article with a \u0026ldquo;small\u0026rdquo; section about it. We all know what the word means, from a distance. If you don\u0026rsquo;t know what a home row is or why people use keyboard-only environments, then there is little purpose in ricing your setup unless you want it to look \u0026ldquo;cool and 1337\u0026rdquo;. I think it is important to talk about these ergonomics base concepts since they are rarely taught nowadays.\nkeyboard Maybe you are a millennial like me. The first OS you ever laid your hands on was probably a complete graphical interface called Windows (95 in this case). What\u0026rsquo;s this? I move this mouse thingy, and I have a cursor that mirrors it on the screen? What\u0026rsquo;s that? I type on this keyboard thingy and letters appear on the screen? That\u0026rsquo;s usually how the trouble starts, you get into things, as an autodidact, fiddle about and eventually you end up getting the results you wanted. However, achieving your goals doesn\u0026rsquo;t necessarily mean you went the \u0026ldquo;correct\u0026rdquo; way about doing it, in this case \u0026ldquo;ergonomically\u0026rdquo; ideal way or even the most efficient way.\nLet me give you an example: copy and paste. Everybody knows how to do it, if you are reading this you probably even know of at least two ways of doing it. Now if you were to ask your less technologically inclined relative how to do it, they would probably know of one way to do it:\n You left click down at one point of the text You drag your mouse over to where you want the choice to end You release the left click mouse button You right click over the selected text you left click on the copy button on the dropdown you right click on the input you want to paste the selection inside of you left click on the paste button on the dropdown  Sure, admittedly we did get the result we wanted, a copy and paste operation, but that\u0026rsquo;s 7 different steps, and as very proficient tech-savvy people we know better:\n You left click down at one point of the text You drag your mouse over to where you want the choice to end You release the left click mouse button You press CTRL+C on your keyboard. you left click on the input you want to paste the selection inside of You press CTRL+V on your keyboard  Right about now, you might realize this process only has a single less step than the first one. How come the second way feels \u0026ldquo;way faster and easier\u0026rdquo; then? So much so that when you see people use the first one you go into full body cringe.\n  The answer is the keyboard. shown for illustration purposes only. actual product may vary.    You see mice are a terrific invention, useful for plenty of things, games, graphics software and such. They allow us to interact with abstract representations of concepts that can then be materialized into useful data. Interact with an equalizer curve in Ableton. Aim your crosshair at an enemy in CS:GO. They do need one important thing however, context. If you turn your screen off, your mouse becomes useless in most scenarios. What I\u0026rsquo;m getting at here is that when you do the action of \u0026ldquo;clicking copy from a contextual dropdown menu\u0026rdquo;, before you even begin to do what you want, you need to process the context that is given to you by the screen. The copy choice is the 3rd one from the top. I must move my mouse down and make sure I hover the right button before clicking.\nAll this context is not necessary when you use your keyboard. You know that in almost any application, when you press CTRL+C it will put the choice in your clipboard. When you press CTRL+V you know that it will paste. You have an action with a direct consequence and don\u0026rsquo;t have to process any information that is given to you. That\u0026rsquo;s what makes the second copy and paste method seem so \u0026ldquo;natural\u0026rdquo;.\nTo hammer this in a little more, on Windows if I press Win+E I know that it will open a new explorer window, I don\u0026rsquo;t have to process, I cannot miss-click a choice from a dropdown.\nSo how can we use this and take our copy and paste operation a step further? Let\u0026rsquo;s take the example of copying an entire line:\n Move your cursor to the beginning of the choice with your keyboard (arrow keys or movement keys, more on that later) Press Shift+End Press Ctrl+C Move your cursor to the desired insertion point (arrow keys or movement keys, more on that later) Press Ctrl+V  As you can see, we are now only using our keyboard for this operation, in this example we are copying an entire line, but if you wanted to select only a couple of letters you could use Shift+Arrows or if you wanted to select word per word you could also do Shift+Ctrl+Arrows. All these key bindings produce specific results that will (mostly) always be the same.\nSo, the first takeaway here is that efficiency and repeatability are major assets of the keyboard. Action 1 on a keyboard will (mostly) always result in the same consequence 1'. The only cognitive load associated with that now is that you must learn a bunch of key bindings. Once you have them down however, it just gets easier and easier the more you use them. No matter how good you become with a mouse however, there will always be the cognitive load of having to process contextual information that will always vary, coupled with the inherent \u0026ldquo;inaccuracy\u0026rdquo; of a mouse, or should I say of human hands.\nAnother major bonus of reduced mouse usage is that moving your hands between your mouse and your keyboard, and also simply using your mouse can cause strain on your wrists (most mice are poorly ergonomically designed and apply strain to the wrist, and if your workspace is limited you might also fall into the habit of using your wrist to move your mouse instead of your entire arm), so by not using your mouse (or as little as possible) and having an appropriate posture on your keyboard you drastically reduce the strain on your wrists and therefore the risks of rsi.\nhome row Speaking of good keyboard posture, here\u0026rsquo;s another one my gen y (and above) friends might not be aware about: Have you ever noticed that two of your keyboard keys have small \u0026ldquo;bumps\u0026rdquo; on them? If you are on a QWERTY keyboard it\u0026rsquo;s the F and J keys.\n  the home keys live on the home row the orange fruit is of an orange color    These keys are called home keys, they live on the home row. They are a \u0026ldquo;landmark\u0026rdquo; for your fingers to aid you in touch typing (typing without looking at your keyboard. The feedback of touching these \u0026ldquo;landmarks\u0026rdquo; lets you know where your hands are placed)\nEach index is supposed to be placed on each of these \u0026ldquo;bumps\u0026rdquo;, or home keys. The rest of your fingers should then naturally fall into their respective positions on the home row.\n  ideal ergonomic hand placement on a keyboard yes I do realize that the hands are upside down, sue me.    This is the \u0026ldquo;ideal ergonomic\u0026rdquo; finger placement, each hand is centered on its half of the keyboard, no keys should be harder to reach with one hand or the other (not really but let\u0026rsquo;s just pretend the world is \u0026ldquo;perfect\u0026rdquo; for our purposes), all the while requiring the least travel possible from your fingers/hands.\nI won\u0026rsquo;t go into much more detail about touch typing as this could call for an entire post in and of itself, there are books out there, courses, apps, games, whatever you can think of to learn touch typing it probably exists by now.\nThe only real tip I can give about it is to just learn by doing it, as with anything it gets easier the longer you work at it.\nIf you\u0026rsquo;ve ever used vi, and wondered why the default movement keys are hjkl, well the reason is that they are the easiest keys for your right hand to reach, while your left hand can press down modifiers.\nas a quick tldr of this preface:\n the keyboard allows you to memorize key bindings that produce specific repeatable actions without worrying (too much) about context and accuracy, both (learning the key binds and touch typing) are a question of practice, unlike a mouse there is an ideal way of positioning your hands on a keyboard which ensures to the \u0026ldquo;smoothest\u0026rdquo; experience possible, reduces strain on the wrists, and much of the conceptual choices of terminal based applications are a result of said \u0026ldquo;ergonomic\u0026rdquo; hand placement  Keep all of this in mind when designing your custom rice, it\u0026rsquo;s not simply about looking cool (at least for me), it\u0026rsquo;s about having an efficient, ergonomic and coherent environment. When setting key bindings that you often use, try to privilege keys closest to the home row for instance. Usually, it takes a while to narrow down exactly what functions you will be using more than others and adjusting everything, but it is important to always keep in mind that we\u0026rsquo;re trying to make our life easier, not prettier (although usually once you\u0026rsquo;re done with the functional part, then comes the \u0026ldquo;unixporn\u0026rdquo; part, where you can go crazy with all the shadows, corners, gaps, borders, backgrounds, etc. you want).\nNow let\u0026rsquo;s get to the more hands-on part of this, pun intended 👐\nDesktop Environments vs Window Managers what\u0026rsquo;s the difference ? i3 sway Launchers, Status Bars and Notifications rofi polybar dunst Terminals and Shells urxvt fish with omf Text Editor do i actually need to learn vim (or emacs) ? webstorm/vscode with keyboard plugin + key bindings vim vs emacs the \u0026ldquo;unixporn\u0026rdquo; factor ranger ncmpcpp and mopidy picom and forks i3-gaps and forks neofetch colors closing thoughts still writing this article, come back later i guess (pls)\n","summary":"\u003cp\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e","tags":["ricing","ergonomics"],"title":"Ricing Linux in 2021","url":"/post/ricing-linux/"},{"categories":["macos"],"contents":"Currently being written come back later.\n  macos ricing demo here is what the end result of what I am going to be talking about looks like.    Workflow Examples LaTeX   Web Development w/ Browser Reload  ","summary":"\u003cp\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e","tags":["ricing"],"title":"Ricing macOs in 2019","url":"/post/ricing-macos/"},{"categories":null,"contents":"   the person name is juke\nlives in france and currently works in paris for la javaness \nlikes anything that has to do with technology (code, video, music, etc.)\ncreates mostly ephemeral, always open source pet projects\nthoroughly enjoys the dracula  color scheme\ndiscover his work on github , hackerone  or linkedin \nsupport him on patreon  or github sponsors \nfollow him on twitter , hackernews , youtube , soundcloud  or twitch \nplay on steam , add jukefr#2107 on battle.net or chat on discord with jukefr#5378\nemail is pm [at] juke [dot] fr\nhave a lovely day the site this website is built on hugo  and themed with an old forked afterdark \nthe source  is available on github, gets automatically built and deployed on ipfs and is available via fleek cdn on this domain.\ngoogle analytics is available as an opt-in if you want to share data with me, by default i do not load any external scripts or track anything. the settings banner manages two cookies :\n one to define whether to hide or show the banner one to define whether to load or not the tracking script  none of this information should be sensitive and/or allow third parties to identify you in any way (except if you enable the tracking script of course)\ni have no real clue about how licensing works so here goes nothing, bpgdec.js is lpgl, lazysizes.js is mit, (i think) ga.js is apache, afterdark was wtfpl at time of fork and now agpl, ani-cursor is mit, the cursors are under cc attributed to hhhh, this website itself is agpl \n","summary":"the person name is juke\nlives in france and currently works in paris for la javaness \nlikes anything that has to do with technology (code, video, music, etc.)\ncreates mostly ephemeral, always open source pet projects\nthoroughly enjoys the dracula  color scheme\ndiscover his work on github , hackerone  or linkedin \nsupport him on patreon  or github sponsors \nfollow him on twitter , hackernews , youtube , soundcloud  or twitch","tags":null,"title":"about","url":"/about/"},{"categories":["blog"],"contents":"Formula  Hugo Github Pages Github Actions  Result   latency.apex.sh screenshot latency comparison between different countries   ","summary":"\u003cp\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e","tags":["hugo","cms","github"],"title":"Up and Running with Hugo in 2018","url":"/post/up-and-running-with-hugo/"}]